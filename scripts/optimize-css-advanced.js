const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

console.log('üöÄ Iniciando optimizaci√≥n avanzada de CSS para Dekary.com...\n');

// Configuraci√≥n
const config = {
  cssDir: './assets/css',
  purgedDir: './assets/css/purged',
  optimizedDir: './assets/css/optimized',
  backupDir: './assets/css/backup',
  criticalDir: './assets/css/critical'
};

// Crear directorios si no existen
Object.values(config).forEach(dir => {
  if (!fs.existsSync(dir)) {
    fs.mkdirSync(dir, { recursive: true });
    console.log(`‚úÖ Directorio creado: ${dir}`);
  }
});

// Funci√≥n para ejecutar comandos
function runCommand(command, description) {
  try {
    console.log(`üîÑ ${description}...`);
    const result = execSync(command, { encoding: 'utf8', stdio: 'pipe' });
    console.log(`‚úÖ ${description} completado`);
    return result;
  } catch (error) {
    console.error(`‚ùå Error en ${description}:`, error.message);
    return null;
  }
}

// Funci√≥n para analizar tama√±o de archivos
function analyzeFileSizes() {
  console.log('\nüìä Analizando tama√±os de archivos CSS...');
  
  const cssFiles = fs.readdirSync(config.cssDir).filter(file => file.endsWith('.css'));
  let totalSize = 0;
  
  cssFiles.forEach(file => {
    const filePath = path.join(config.cssDir, file);
    const stats = fs.statSync(filePath);
    const sizeKB = (stats.size / 1024).toFixed(2);
    totalSize += stats.size;
    console.log(`   ${file}: ${sizeKB} KB`);
  });
  
  console.log(`   Total: ${(totalSize / 1024).toFixed(2)} KB`);
  return totalSize;
}

// Funci√≥n para ejecutar PurgeCSS
function runPurgeCSS() {
  console.log('\nüßπ Ejecutando PurgeCSS avanzado...');
  
  const purgeCommand = `npx purgecss --config config/purgecss.config.js`;
  return runCommand(purgeCommand, 'PurgeCSS');
}

// Funci√≥n para minificar CSS
function minifyCSS() {
  console.log('\nüíé Minificando CSS...');
  
  const cssFiles = fs.readdirSync(config.purgedDir).filter(file => file.endsWith('.css'));
  
  cssFiles.forEach(file => {
    const inputPath = path.join(config.purgedDir, file);
    const outputPath = path.join(config.optimizedDir, file.replace('.css', '.min.css'));
    
    // Usar cssnano para minificaci√≥n
    const minifyCommand = `npx cssnano ${inputPath} ${outputPath}`;
    runCommand(minifyCommand, `Minificaci√≥n de ${file}`);
  });
}

// Funci√≥n para crear CSS cr√≠tico
function createCriticalCSS() {
  console.log('\nüéØ Creando CSS cr√≠tico...');
  
  // Copiar el CSS cr√≠tico existente
  const criticalSource = path.join(config.cssDir, 'critical.css');
  const criticalDest = path.join(config.criticalDir, 'critical.min.css');
  
  if (fs.existsSync(criticalSource)) {
    fs.copyFileSync(criticalSource, criticalDest);
    console.log('‚úÖ CSS cr√≠tico copiado');
  }
}

// Funci√≥n para generar reporte de optimizaci√≥n
function generateOptimizationReport() {
  console.log('\nüìà Generando reporte de optimizaci√≥n...');
  
  const originalSize = analyzeFileSizes();
  
  // Analizar archivos purgados
  if (fs.existsSync(config.purgedDir)) {
    const purgedFiles = fs.readdirSync(config.purgedDir).filter(file => file.endsWith('.css'));
    let purgedSize = 0;
    
    purgedFiles.forEach(file => {
      const filePath = path.join(config.purgedDir, file);
      const stats = fs.statSync(filePath);
      purgedSize += stats.size;
    });
    
    const savings = originalSize - purgedSize;
    const savingsPercent = ((savings / originalSize) * 100).toFixed(2);
    
    console.log(`\nüéâ RESULTADOS DE OPTIMIZACI√ìN:`);
    console.log(`   Tama√±o original: ${(originalSize / 1024).toFixed(2)} KB`);
    console.log(`   Tama√±o despu√©s de PurgeCSS: ${(purgedSize / 1024).toFixed(2)} KB`);
    console.log(`   Ahorro: ${(savings / 1024).toFixed(2)} KB (${savingsPercent}%)`);
    
    // Guardar reporte
    const report = {
      timestamp: new Date().toISOString(),
      originalSize: originalSize,
      purgedSize: purgedSize,
      savings: savings,
      savingsPercent: savingsPercent,
      files: {
        original: fs.readdirSync(config.cssDir).filter(file => file.endsWith('.css')),
        purged: purgedFiles
      }
    };
    
    const reportPath = path.join(config.optimizedDir, 'optimization-report.json');
    fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
    console.log(`   Reporte guardado en: ${reportPath}`);
  }
}

// Funci√≥n principal
function main() {
  try {
    console.log('üé® DEKARY.COM - OPTIMIZACI√ìN AVANZADA DE CSS\n');
    
    // An√°lisis inicial
    const initialSize = analyzeFileSizes();
    
    // Ejecutar optimizaciones
    runPurgeCSS();
    minifyCSS();
    createCriticalCSS();
    
    // Generar reporte final
    generateOptimizationReport();
    
    console.log('\n‚ú® ¬°Optimizaci√≥n de CSS completada exitosamente!');
    console.log('üöÄ Tu sitio web ahora deber√≠a cargar m√°s r√°pido.');
    
  } catch (error) {
    console.error('\n‚ùå Error durante la optimizaci√≥n:', error.message);
    process.exit(1);
  }
}

// Ejecutar si se llama directamente
if (require.main === module) {
  main();
}

module.exports = { main, analyzeFileSizes, runPurgeCSS };
